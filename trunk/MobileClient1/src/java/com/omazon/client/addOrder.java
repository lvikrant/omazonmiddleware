/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.omazon.client;

import com.test.OmazonLocation;
import com.test.OmazonLocationEJBRemote;
import com.test.OmazonOrder;
import com.test.OmazonOrderEJBRemote;
import com.test.OmazonProduct;
import com.test.OmazonProductEJBRemote;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class addOrder extends javax.swing.JFrame {
    @EJB
    private static OmazonOrderEJBRemote omazonOrderEJB;
    @EJB
    private static OmazonLocationEJBRemote omazonLocationEJB;
    @EJB
    private static OmazonProductEJBRemote omazonProductEJB;
    OmazonOrder order = new OmazonOrder();
    Common comm = new Common();
    private  Connection connect = null;
    private Statement statement;
    /**
     * Creates new form addOrder
     */
    public addOrder() {
        initComponents();
        populateProdName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        prodName = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        custId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        orderDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        currentLocation = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        destination = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        carrier = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("OMAZON");

        prodName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        prodName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Product Name");

        jLabel3.setText("Customer ID");

        jLabel4.setText("Order Date (DD-MM-YYYY)");

        jLabel5.setText("Current Location");

        currentLocation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Frankfurt", "Munich", "Hamburg", "Berlin", "Cologne", "Bonn" }));
        currentLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentLocationActionPerformed(evt);
            }
        });

        jLabel6.setText("Destination Location");

        destination.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Frankfurt", "Munich", "Hamburg", "Berlin", "Cologne", "Bonn" }));

        jLabel9.setText("Carrier");

        carrier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Air", "Water", "Land" }));

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Submit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jButton4)
                .addGap(33, 33, 33)
                .addComponent(jButton3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(custId)
                        .addComponent(prodName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(currentLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carrier, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destination, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prodName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(custId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carrier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prodNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prodNameActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        index ind = new index();
        ind.setVisible(true);
        close();
    }//GEN-LAST:event_jButton3ActionPerformed

    private int getCarrierId(String carrier) {
       
        if(carrier.equals("Air")) {
            return 111;
        }
        else if(carrier.equals("Water")) {
           return 222;
        }
        else {
           return 333;
        }
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        List<OmazonProduct> product_list = new ArrayList<OmazonProduct>();
        DateFormat formatter = null;
        Date convertedDate = null;
        Date expectedDate = null;
        int prod_id = 0;
        int orderId = 0;
        BigDecimal start_lat = null;
        BigDecimal start_long = null;
        BigDecimal dest_lat = null;
        BigDecimal dest_long = null;
        boolean b;
        formatter = new SimpleDateFormat("dd-MM-yyyy");
        String productName = (String) prodName.getSelectedItem();
        order.setProductName(productName);
        b = comm.isUrlReachable("localhost");
        if(b == true) {
            product_list = Main.omazonProductEJB.findAllProductNames(productName);
            prod_id = product_list.get(0).getProductId();
        }
        else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost/locdb1?"+"user=dbuser&password=dbpass");
                String query = "select product_id from omazon_product where product_name = ?";
                PreparedStatement stmt;
                stmt = connect.prepareStatement(query);
                stmt.setString(1, productName);
                ResultSet resultSet = stmt.executeQuery();
                while( resultSet.next())
                {
                        prod_id = resultSet.getInt(1); 
                }
            }
            catch(Exception ex)
            {
                System.out.println("2"+ex);
            }
            finally
            {
                try {
                    connect.close();
                } catch (SQLException ex) {
                    Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("3");
                }
            }
        }
        order.setProductId(prod_id);
        order.setCustomerId(Integer.parseInt(custId.getText()));
        String orddate  = orderDate.getText();
        try {
            convertedDate = (Date) formatter.parse(orddate);
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            Calendar c = Calendar.getInstance();
            c.setTime(sdf.parse(orddate));
            c.add(Calendar.DATE, 4);  // number of days to add
            String expDate = sdf.format(c.getTime());  // dt is now the new date
            expectedDate = (Date) formatter.parse(expDate);
        } catch (ParseException ex) {
            Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("4");
        }
        order.setOrderDate(convertedDate);
        order.setOrderExpectedDeldate(expectedDate);
        order.setOrderExceptionDesc("NA");
        String start = (String) currentLocation.getSelectedItem();
        String dest = (String) destination.getSelectedItem();
        if(start.equalsIgnoreCase(dest)) {
            JOptionPane.showMessageDialog(this, "Current location and destination cannot be the same", "Confirmation", JOptionPane.OK_OPTION);
            destination.setSelectedItem("Select");
            jButton4ActionPerformed(evt);
        }
        
        List<OmazonLocation> location_list = new ArrayList<OmazonLocation>();
        if(b == true) {
            location_list = Main.omazonLocationEJB.findAllLocationByCity(start);    
            start_lat = location_list.get(0).getLocationLat();
            start_long = location_list.get(0).getLocationLong();
            location_list = Main.omazonLocationEJB.findAllLocationByCity(dest);
            dest_lat = location_list.get(0).getLocationLat();
            dest_long = location_list.get(0).getLocationLong();
        }
        else
        {
            try 
            {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost/locdb1?"+"user=dbuser&password=dbpass");
                String query = "Select location_lat, location_long from omazon_location where location_city = ?";
                PreparedStatement stmt = connect.prepareStatement(query);
                stmt.setString(1, start);
                ResultSet resultSet = stmt.executeQuery();
                while(resultSet.next())
                {
                    start_lat = resultSet.getBigDecimal(1);
                    start_long = resultSet.getBigDecimal(2);         
                }
                
                query = "Select location_lat, location_long from omazon_location where location_city = ?";
                stmt = connect.prepareStatement(query);
                stmt.setString(1, dest);
                resultSet = stmt.executeQuery();
                while( resultSet.next())
                {
                    dest_lat = resultSet.getBigDecimal(1);
                    dest_long = resultSet.getBigDecimal(2);         
                }
             }
            catch(Exception exce)
            {
                System.out.println("5"+exce);
            }
            try {
                  connect.close();
                } catch (SQLException ex) {
                    Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("6");
                }   
            
        }
        order.setOrderStartLat(start_lat);
        order.setOrderStartLong(start_long);
        order.setOrderEndLat(dest_lat);
        order.setOrderEndLong(dest_long);
        order.setOrderStatusLat(start_lat);
        order.setOrderStatusLong(start_long);
        String car = (String) carrier.getSelectedItem();
        order.setOrderCarrier(car);
        int c_id = getCarrierId(car);
        order.setOrderCarrierId(c_id);
        order.setOrderStatus('A');
        if(b == true) {
            orderId = Main.omazonOrderEJB.addOrder(order);
        }
        else
        {
            try 
                {
                    connect = DriverManager.getConnection("jdbc:mysql://localhost/locdb1?"+"user=dbuser&password=dbpass");
                    orderId = new Random().nextInt(9000) + 1000;
                    String sql = "INSERT INTO omazon_order (order_id, product_id, product_name, customer_id, order_date, order_start_lat, order_start_long, "
                            + "order_end_lat, order_end_long, order_carrier, order_carrier_id, order_status_lat, order_status_long, order_expected_deldate, order_status, order_exception_desc)"
                            + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement ps = connect.prepareStatement(sql);
                    ps.setInt(1,orderId);
                    ps.setInt(2,prod_id);
                    ps.setString(3, productName);
                    ps.setInt(4, Integer.parseInt(custId.getText()));
                    java.sql.Date sqlDate = new java.sql.Date(convertedDate.getTime());
                    ps.setDate(5, sqlDate);
                    ps.setBigDecimal(6, start_lat);
                    ps.setBigDecimal(7, start_long);
                    ps.setBigDecimal(8, dest_lat);
                    ps.setBigDecimal(9, dest_long);
                    ps.setString(10, car);
                    ps.setInt(11, c_id);
                    ps.setBigDecimal(12, start_lat);
                    ps.setBigDecimal(13, start_long);
                    sqlDate = new java.sql.Date(expectedDate.getTime());
                    ps.setDate(14, sqlDate);
                    ps.setString(15, "A");
                    ps.setString(16, "NA");
                    int rowCount = ps.executeUpdate();
                }
            catch(Exception e1)
            {
                System.out.println("7"+e1);
            }
            finally {
                try {
                    connect.close();
                } catch (SQLException ex) {
                    Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("1");
                }
            }
        }
        
        if(orderId == 0) {
            JOptionPane.showMessageDialog(this, "Order not added", "Confirmation", JOptionPane.OK_OPTION);
        }
                
        String Message;
        Message = "New Order Id is " + String.valueOf(orderId);
        JOptionPane.showMessageDialog(this, Message, "Confirmation", JOptionPane.OK_OPTION);
        clear();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void currentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentLocationActionPerformed
    
    private void populateProdName()
    {
        boolean b;
        DefaultComboBoxModel model
                = (DefaultComboBoxModel)prodName.getModel();
        model.removeAllElements();
        List listobj = null;
        b = comm.isUrlReachable("localhost");
        if(b == true) {
            listobj = Main.omazonProductEJB.findProductNames();
            Iterator iteratorobj = listobj.iterator();
            model.addElement("Select");
            while(iteratorobj.hasNext()) {
                String obj;
                obj=(String)iteratorobj.next();
                model.addElement(obj);
            }
        }
        else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost/locdb1?"+"user=dbuser&password=dbpass");
                statement = connect.createStatement();
                PreparedStatement preparedStatement = connect.prepareStatement("Select product_name from omazon_product");
                ResultSet resultSet = preparedStatement.executeQuery();
                if(resultSet.next()==false)
		{
                    throw new Exception();
		}
		else
		{
                    model.addElement("Select");
                    while( resultSet.next())
                    {
                        String obj;
                        obj = resultSet.getString(1);
                        model.addElement(obj);
                    }
                }
            }
            catch (Exception ex) {
                Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("8");
            }
            finally {
                try {
                    connect.close();
                } catch (SQLException ex) {
                    Logger.getLogger(addOrder.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("9");
                }
            }
        }
    }
    public void clear() {
        custId.setText("");
        orderDate.setText("");
        currentLocation.setSelectedItem("Select");
        destination.setSelectedItem("Select");
        prodName.setSelectedItem("Select");
        carrier.setSelectedItem("Select");
    }
    
    public void close() {
        WindowEvent winclose = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winclose);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new addOrder().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox carrier;
    private javax.swing.JComboBox currentLocation;
    private javax.swing.JTextField custId;
    private javax.swing.JComboBox destination;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField orderDate;
    private javax.swing.JComboBox prodName;
    // End of variables declaration//GEN-END:variables
}
